package god.hydra.algorithm.climbing_stairs;

import god.hydra.classDef.AlgorithmDef;

/**
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 *
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 *
 * 注意：给定 n 是一个正整数。
 *
 * 示例 1：
 *
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 * 示例 2：
 *
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/climbing-stairs
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class ClimbingStairs implements AlgorithmDef {

    /*
    解题思路-暴力解法-递归
    当1阶台阶时，答案只能是1步
    当2阶太极时，答案是1+1或2+0
    当第n阶台阶时，取决于最后2阶怎么走，可以走1步也可以走2步，变相就是求出最后一次走1步的方法数+最后一次走2步的方法数
    以此类推
     */
    public int climbingStairs(int n){
//        递归第一步先写出口
//        台阶为1只有1这种方法 台阶为2有2种
        if (n == 1 || n == 2) return n;
//        第一次执行到这里的时候，其实只是计算最后2步怎么走，因为最后一步有2种选择，走1+1或是2
//        进入递归后，又会计算n-1和n-2的最后2步怎么走就是n-3和n-4怎么走直到n=1|2
        return climbingStairs(n - 1) + climbingStairs(n - 2);
    }

    /*
    解题思路-斐波那契数列
    动态规划抽象出重复自底向上
    从最底部开始计算，每次计算得到下一步的2种答案
     */
    public int climbingStairsFinb(int n){
        int first = 1;
        int second = 2;
        for (int i = 3; i < n; i++){
            int temp = first + second;
            first = second;
            second = temp;
        }
        return first + second;
    }


    /*
    摘抄leetcode思路分析
    解法：动态规划

	public int climbStairs(int n) {
        int[] count = new int[n + 1];
        count[0] = 1;
        count[1] = 1; // 边界条件
        for(int i = 2; i <= n; i++)
            count[i] = count[i - 1] + count[i - 2]; // 转移方程
        return count[n];
    }
    思路分析：

    题目要求共有多少种方法可以到达楼顶。每一个阶梯都可以选择走两个阶梯或者1个阶梯，看起来是可以通过回溯来解决的计数问题，但其中存在很多重复计算比如1->2->3与1->3两种方式走到第三个阶梯，之后的走法在回溯中都会重复计算。这样的问题 是典型的动态规划的问题。
    动态规划第一步：确定状态，找子问题及完成问题的最后一步。最后一步是，达到最后一个阶梯有多少种方法。要到达最后一个阶梯，可以从倒数第二个台阶走两阶，也可以从倒数第一个台阶走一阶。所以到达最后一个台阶的方法数，就转化为求两个子问题，到达倒数第一，二个台阶有多少方法，然后再相加。所以状态就是到达第i个台阶有多少种方法。用count[i]表示到达第i个台阶的方法总数。
    动态规划第二步：写出状态转移方程。从上面的描述可以直接得出来 转移方程为count[i] = count[i - 1] + count[i - 2]。
    动态规划第三步：边界条件，也就是找到无法通过转移方程得到的结果。大部分情况都是结合状态的实际意义来确定的。在本题中count[0]=0,count[1]的意义就是第0阶台阶有一种方法达到，就是不跳；第一阶台阶有一种方法就是从0阶跳一阶。
    动态规划第四步：确定计算方向，这个看状态方程与边界条件。在本题中显然是从小台阶得到大台阶。
    时间负责度为O(n)O(n)，空间复杂度也为O(n)O(n)
     */
}
